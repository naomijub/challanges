/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package strontium_2019;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        List<String> words = new ArrayList<String>(Arrays.asList(new String[]{"xxbxx", "xbx", "x"}));
        Pattern pattern = Pattern.compile("([a-z])\\1\\1+");
        Set<String> allCombinations = getAllCombinations(words);
        Integer integer = allCombinations
                .stream()
                .map(w -> {
                    Matcher matcher = pattern.matcher(w);
                    int len = 0;

                    while (matcher.find()) {
                        final String group = matcher.group();
                        if (group.length() > len) {
                            len = group.length();
                        }
                    }

                    return len;
                }).max(Integer::compare).get();


        System.out.println(integer.intValue());
    }

    public static Set<String> getAllCombinations(List<String> elements) {
        List<List<String>> combinationList = new ArrayList<List<String>>();
        for ( long i = 1; i < Math.pow(2, elements.size()); i++ ) {
            List<String> list = new ArrayList<String>();
            for ( int j = 0; j < elements.size(); j++ ) {
                if ( (i & (long) Math.pow(2, j)) > 0 ) {
                    list.add(elements.get(j));
                }
            }
            combinationList.add(list);
        }
        return combinationList.stream()
                .map(l -> l.stream()
                        .collect(Collectors.joining("")))
                .collect(Collectors.toSet());
    }
}
